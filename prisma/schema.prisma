// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                @id @default(autoincrement())
  username         String
  fullname         String?
  gender           String?
  email            String             @unique
  isVerified       Boolean            @default(false)
  password         String
  location         String?
  profileImg       String?
  dob              DateTime?
  role             RoleStatus         @default(user)
  opportunity      Opportunity[]
  userNotification UserNotification[]
  like             Like[]
  comment          Comment[]
  verificationCode String?
  phoneNumber      String?
  createdAt        DateTime           @default(now())
  Saved            Saved[]
  interests        UserInterests[]
}

model Opportunity {
  id           Int               @id @default(autoincrement())
  title        String
  description  String
  location     String?
  deadline     DateTime?
  userId       Int
  oppLink      String?
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  notification Notification[]
  like         Like[]
  comment      Comment[]
  saved        Saved[]
  categoryId   Int?
  category     Category?         @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  status       OpportunityStatus @default(open)
  updatedAt    DateTime          @updatedAt
  createdAt    DateTime          @default(now())
}

model Notification {
  id                Int                @id @default(autoincrement())
  opportunityId     Int?
  opportunity       Opportunity?       @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  categoryId        Int?
  category          Category?          @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  title             String
  body              String
  userNotifications UserNotification[]
  createdAt         DateTime           @default(now())
}

model UserNotification {
  id             Int          @id @default(autoincrement())
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  notificationId Int
  isRead         Boolean      @default(false)
  isLocalSent    Boolean      @default(false)
  createdAt      DateTime     @default(now())

  @@unique([userId, notificationId])
}

model Category {
  id              Int             @id @default(autoincrement())
  name            String          @unique
  notification    Notification[]
  opportunity     Opportunity[]
  interestedUsers UserInterests[]
}

model Like {
  id     Int         @id @default(autoincrement())
  oppId  Int
  opp    Opportunity @relation(fields: [oppId], references: [id], onDelete: Cascade)
  userid Int
  user   User        @relation(fields: [userid], references: [id], onDelete: Cascade)

  @@unique([oppId, userid])
}

model Comment {
  id        Int         @id @default(autoincrement())
  oppId     Int
  body      String
  opp       Opportunity @relation(fields: [oppId], references: [id], onDelete: Cascade)
  userid    Int
  user      User        @relation(fields: [userid], references: [id], onDelete: Cascade)
  createdAt DateTime    @default(now())
}

model Saved {
  id     Int         @id @default(autoincrement())
  oppId  Int
  opp    Opportunity @relation(fields: [oppId], references: [id], onDelete: Cascade)
  userid Int
  user   User        @relation(fields: [userid], references: [id], onDelete: Cascade)

  @@unique([oppId, userid])
}

model UserInterests {
  id         Int @id @default(autoincrement())
  userId     Int
  categoryId Int

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([userId, categoryId])
}

enum OpportunityStatus {
  open
  closed
}

enum RoleStatus {
  admin
  moderator
  user
}
